// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.AutoRaiseCoral;
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.Climb;
import frc.robot.commands.ClimbSafety;
import frc.robot.commands.GrabAlgae;
import frc.robot.commands.GrabCoral;
import frc.robot.commands.PlaceAlgae;
import frc.robot.commands.PlaceCoral;
import frc.robot.commands.SlowRobot;
import frc.robot.commands.ZeroGyro;
import frc.robot.subsystems.Elevator;
import frc.robot.subsystems.Shoulder;
import frc.robot.subsystems.Wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Shoulder m_shoulder = new Shoulder();
    public final Wrist m_wrist = new Wrist();
    public final Elevator m_elevator = new Elevator();

// Joysticks
private final XboxController accessory = new XboxController(1);
private final XboxController driver = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("PlaceAlgae", new PlaceAlgae());
    SmartDashboard.putData("GrabAlgae", new GrabAlgae());
    SmartDashboard.putData("PlaceCoral", new PlaceCoral());
    SmartDashboard.putData("GrabCoral", new GrabCoral());
    SmartDashboard.putData("SlowRobot", new SlowRobot());
    SmartDashboard.putData("ZeroGyro", new ZeroGyro());
    SmartDashboard.putData("Climb", new Climb());
    SmartDashboard.putData("ClimbSafety", new ClimbSafety());
    SmartDashboard.putData("AutoRaiseCoral", new AutoRaiseCoral(m_shoulder, m_elevator, m_wrist  ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    SmartDashboard.putString("Selection", "L4");
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

  //  m_chooser.addOption("AutoRaiseCoral", new AutoRaiseCoral( m_shoulder, m_elevator, m_wrist ));
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("AutoRaiseCoral", new AutoRaiseCoral( m_shoulder, m_elevator, m_wrist ));
 
    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton climbSafetyButton = new JoystickButton(accessory, XboxController.Button.kRightBumper.value);        
climbSafetyButton.onTrue(new ClimbSafety().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton climbButton = new JoystickButton(accessory, XboxController.Button.kA.value);        
climbButton.onTrue(new Climb().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton slowRobotButton = new JoystickButton(driver, XboxController.Button.kA.value);        
slowRobotButton.onTrue(new SlowRobot().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton placeCoralButton = new JoystickButton(driver, XboxController.Button.kRightBumper.value);        
placeCoralButton.onTrue(new PlaceCoral().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton grabCoralButton = new JoystickButton(driver, XboxController.Button.kA.value);        
grabCoralButton.onTrue(new GrabCoral().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton zeroGyroButton = new JoystickButton(driver, XboxController.Button.kStart.value);        
zeroGyroButton.onTrue(new ZeroGyro().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton grabAlgaeButton = new JoystickButton(driver, XboxController.Button.kA.value);        
grabAlgaeButton.onTrue(new GrabAlgae().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton placeAlgaeButton = new JoystickButton(driver, XboxController.Button.kLeftBumper.value);        
placeAlgaeButton.onTrue(new PlaceAlgae().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getdriver() {
      return driver;
    }

public XboxController getaccessory() {
      return accessory;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

